package org.isen.Projet.controller

import org.isen.Projet.model.Station
import org.isen.Projet.model.StationModel
import org.isen.Projet.view.MainView
import org.slf4j.LoggerFactory

class MainController {
    private val model = StationModel()
    private lateinit var view: MainView
    private var allStations: List<Station> = listOf()
    private val logger = LoggerFactory.getLogger(MainController::class.java)

    fun setView(view: MainView) {
        this.view = view
        logger.info("‚úÖ Vue correctement li√©e au contr√¥leur")
    }

    fun loadOnlineData() {
        logger.info("üì° Chargement des donn√©es depuis l'API...")
        val stations = model.fetchStationsOnline()
        allStations = stations
        view.updateData(allStations)
        logger.info("‚úÖ ${stations.size} stations charg√©es depuis l'API")
    }

    fun searchStationsByCity(city: String) {
        if (city.isEmpty()) {
            view.showError("Veuillez entrer une ville.")
            return
        }

        logger.info("üîç Recherche des stations pour la ville '$city'...")
        val stations = model.fetchStationsByCity(city)

        if (stations.isEmpty()) {
            logger.warn("‚ùå Aucune station trouv√©e pour '$city'")
            view.showError("Aucune station trouv√©e pour '$city'.")
        } else {
            logger.info("‚úÖ ${stations.size} stations trouv√©es pour '$city'")
            view.updateData(stations)
        }
    }

    fun searchStationsByItinerary(startCity: String, endCity: String) {
        if (startCity.isEmpty() || endCity.isEmpty()) {
            logger.warn("‚ö† Recherche itin√©raire incompl√®te.")
            view.showError("Veuillez entrer une ville de d√©part et une ville d'arriv√©e.")
            return
        }

        logger.info("üìç Recherche d'itin√©raire entre '$startCity' et '$endCity'...")
        val filteredStations = model.fetchStationsByItinerary(startCity, endCity)

        if (filteredStations.isEmpty()) {
            logger.warn("‚ö† Aucune station trouv√©e sur l'itin√©raire.")
            view.showError("Aucune station trouv√©e entre '$startCity' et '$endCity'.")
        } else {
            logger.info("‚úÖ ${filteredStations.size} stations trouv√©es sur l'itin√©raire.")
            view.updateData(filteredStations)
        }
    }
}
